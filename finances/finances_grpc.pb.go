// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: finances.proto

package finances_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FinancesClient is the client API for Finances service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FinancesClient interface {
	// Register registers a new user.
	Expense(ctx context.Context, in *ExpenseRequest, opts ...grpc.CallOption) (*ExpenseResponse, error)
}

type financesClient struct {
	cc grpc.ClientConnInterface
}

func NewFinancesClient(cc grpc.ClientConnInterface) FinancesClient {
	return &financesClient{cc}
}

func (c *financesClient) Expense(ctx context.Context, in *ExpenseRequest, opts ...grpc.CallOption) (*ExpenseResponse, error) {
	out := new(ExpenseResponse)
	err := c.cc.Invoke(ctx, "/finances.Finances/Expense", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FinancesServer is the server API for Finances service.
// All implementations must embed UnimplementedFinancesServer
// for forward compatibility
type FinancesServer interface {
	// Register registers a new user.
	Expense(context.Context, *ExpenseRequest) (*ExpenseResponse, error)
	mustEmbedUnimplementedFinancesServer()
}

// UnimplementedFinancesServer must be embedded to have forward compatible implementations.
type UnimplementedFinancesServer struct {
}

func (UnimplementedFinancesServer) Expense(context.Context, *ExpenseRequest) (*ExpenseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Expense not implemented")
}
func (UnimplementedFinancesServer) mustEmbedUnimplementedFinancesServer() {}

// UnsafeFinancesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FinancesServer will
// result in compilation errors.
type UnsafeFinancesServer interface {
	mustEmbedUnimplementedFinancesServer()
}

func RegisterFinancesServer(s grpc.ServiceRegistrar, srv FinancesServer) {
	s.RegisterService(&Finances_ServiceDesc, srv)
}

func _Finances_Expense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExpenseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancesServer).Expense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/finances.Finances/Expense",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancesServer).Expense(ctx, req.(*ExpenseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Finances_ServiceDesc is the grpc.ServiceDesc for Finances service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Finances_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "finances.Finances",
	HandlerType: (*FinancesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Expense",
			Handler:    _Finances_Expense_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "finances.proto",
}
